<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member-mapper">

	<select id="selectMember" parameterType="Member" resultType="Member">
		SELECT * FROM MEMBER
		WHERE USERID = #{userId}
	</select>
	
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES (SEQ_MEM.NEXTVAL, DEFAULT, #{userId}, #{userPwd}, #{userName},
				#{birthday}, #{zipCode}, #{address1}, #{address2}, #{phone}, #{email}, #{gender}, 
				DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
	</insert>
	
	<select id="selectOneMember" parameterType="Member" resultType="Member">
		SELECT * FROM MEMBER
		WHERE USERID = #{userId}
	</select>
	
	<select id="selectMemberView" parameterType="string" resultType="Member">
		SELECT * FROM MEMBER
		WHERE USERID = #{userId}
	</select>
	
	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER 
		<set>
			<if test="userPwd != null">
				USERPWD = #{userPwd},
			</if>
			<if test="userName != null">
				USERNAME = #{userName},
			</if>
			<if test="address1 != null">
				ADDRESS1 = #{address1},
			</if>
			<if test="address2 != null">
				ADDRESS2 = #{address2},
			</if>
			<if test="zipCode != null">
				ZIPCODE = #{zipCode},
			</if>
	
		</set>
		WHERE USERID = #{userId}
	</update>
	
	<delete id="deleteMember" parameterType="string">
		DELETE FROM MEMBER
		WHERE USERID = #{userId}
	</delete>
	
	<select id="checkIdDuplicate" parameterType="hashmap" statementType="CALLABLE">
	<!-- CALLABLE Statement는 일반 Statement, PreparedStatement와는 다르게 프로시져(PL/SQL)를
	         호출하는 전용 실행 문법이다. -->
	<!-- CallableStatement 는 { } 로 묶어 실행하며,
	        시작 괄호 '{' 다음에 Tab을 사용할 경우 값을 읽지 못한다. -->
	     { CALL ID_DUP_CHK( #{userId, mode=IN, jdbcType=VARCHAR}, 
	                        #{result, mode=OUT, jdbcType=NUMERIC, javaType=integer} ) }
	</select>
</mapper>










